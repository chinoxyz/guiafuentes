#define M 5011
vector<int> suc[M]; // LISTA DE SUCESORES
vector<int> pred[M]; // LISTA DE PREDECESORES
bool visit[M]; // VISITADOS
vector<int> comp; // LISTA AUXILIAR ORDEN DE PRIMERA VISITA
vector<int> representante; // LISTA DE REPRESENTANTES
int cc[M]; // COMPONENTE CONEXA DEL NODO
int c;
int dfs(int u){
	int v;
	for(int i = 0; i < suc[u].size(); i++){
		v = suc[u][i];
		if(!visit[v]){
			visit[v] = true;
			dfs(v);
		}
	}	
	comp.push_back(u);
}
int dfs2(int u){
	cc[u] = c;
	int v;
	for(int i = 0; i < pred[u].size(); i++){
		v = pred[u][i];
		if(!visit[v]){
			visit[v] = true;
			dfs2(v);
		}
	}	
}
int init(int n){
  int n, u, v;
  memset(visit,0, sizeof(visit));
  for(int i = 0; i < n; i++){
    int u = i;
    if(!visit[u]){
      visit[u] = true;
      dfs(u);
    }
  }
  reverse(comp.begin(), comp.end());
  c = 0;
  memset(visit,0, sizeof(visit));
  for(int i = 0; i < n; i++){
    int u = comp[i];
    if(!visit[u]){
      visit[u] = true;
      dfs2(u);
      representante.push_back(u);
      c++;
    }
  }
}
